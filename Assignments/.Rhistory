theta_samples["Alpha"]
rhat_basic(theta_samples["Alpha"])
print(paste("rhat for alpha", rhat_basic(theta_samples["Alpha"])))
print(paste("R_hat for Alpha", rhat_basic(theta_samples["Alpha"])))
print(paste("rhat for Beta", rhat_basic(theta_samples["Beta"])))
theta_samples <- as.data.frame(fit, pars = "theta")
colnames(theta_samples) <- c("Alpha","Beta")
print(paste("R_hat for Alpha", rhat_basic(theta_samples["Alpha"])))
print(paste("rhat for Beta", rhat_basic(theta_samples["Beta"])))
print(paste("rhat for Beta", round(rhat_basic(theta_samples["Beta"]))))
print(paste("rhat for Beta", round(rhat_basic(theta_samples["Beta"]))))
print(paste("rhat for Beta", round(rhat_basic(theta_samples["Beta"]),3)))
print(paste("rhat for Beta", round(rhat_basic(theta_samples["Beta"]),3)))
print(paste("rhat for Beta", round(rhat_basic(theta_samples["Beta"]),3)))
print(paste("rhat for Beta", round(rhat_basic(theta_samples["Beta"]), digits=3)))
colnames(theta_samples) <- c("Alpha","Beta")
print(paste("R_hat for Alpha", rhat_basic(theta_samples["Alpha"])))
print(paste("rhat for Beta", round(rhat_basic(theta_samples["Beta"]), digits=3)))
theta_samples <- as.data.frame(fit, pars = "theta")
colnames(theta_samples) <- c("Alpha","Beta")
print(paste("R_hat for Alpha", rhat_basic(theta_samples["Alpha"])))
print(paste("rhat for Beta", round(rhat_basic(theta_samples["Beta"]), digits=5)))
theta_samples <- as.data.frame(fit, pars = "theta")
colnames(theta_samples) <- c("Alpha","Beta")
print(paste("R_hat for Alpha", rhat_basic(theta_samples["Alpha"])))
print(paste("rhat for Beta", round(rhat_basic(theta_samples["Beta"]), digits=4)))
theta_samples <- as.data.frame(fit, pars = "theta")
colnames(theta_samples) <- c("Alpha","Beta")
print(paste("R_hat for Alpha", rount(rhat_basic(theta_samples["Alpha"], digits=4))))
theta_samples <- as.data.frame(fit, pars = "theta")
colnames(theta_samples) <- c("Alpha","Beta")
print(paste("R_hat for Alpha", rount(rhat_basic(theta_samples["Alpha"], digits=4)))
print(paste("rhat for Beta", round(rhat_basic(theta_samples["Beta"]), digits=4)))
theta_samples <- as.data.frame(fit, pars = "theta")
colnames(theta_samples) <- c("Alpha","Beta")
print(paste("R_hat for Alpha", rount(rhat_basic(theta_samples["Alpha"]), digits=4)))
theta_samples <- as.data.frame(fit, pars = "theta")
colnames(theta_samples) <- c("Alpha","Beta")
print(paste("R_hat for Alpha", round(rhat_basic(theta_samples["Alpha"]), digits=4)))
print(paste("rhat for Beta", round(rhat_basic(theta_samples["Beta"]), digits=4)))
theta_samples <- as.data.frame(fit, pars = "theta")
colnames(theta_samples) <- c("Alpha","Beta")
print(paste("R_hat for Alpha", round(rhat_basic(theta_samples["Alpha"]), digits=3)))
print(paste("rhat for Beta", round(rhat_basic(theta_samples["Beta"]), digits=3)))
theta_samples <- as.data.frame(fit, pars = "theta")
colnames(theta_samples) <- c("Alpha","Beta")
print(paste("R_hat for Alpha", round(rhat_basic(theta_samples["Alpha"]), digits=3)))
print(paste("rhat for Beta", round(rhat_basic(theta_samples["Beta"]), digits=3)))
theta_samples <- as.data.frame(fit, pars = "theta")
colnames(theta_samples) <- c("Alpha","Beta")
print(paste("R_hat for Alpha", round(rhat_basic(theta_samples["Alpha"]), digits=4)))
print(paste("rhat for Beta", round(rhat_basic(theta_samples["Beta"]), digits=4)))
theta_samples <- as.data.frame(fit, pars = "theta")
colnames(theta_samples) <- c("Alpha","Beta")
print(paste("R_hat for Alpha", round(rhat_basic(theta_samples["Alpha"]), digits=4)))
print(paste("R_hat for Beta", round(rhat_basic(theta_samples["Beta"]), digits=4)))
rm(list=ls())
if(!require(aaltobda)){
install.packages("remotes")
remotes::install_github("avehtari/BDA_course_Aalto", subdir = "rpackage", upgrade="never")
library(aaltobda)
}
```{r}
install.packages("latex2exp")
library(latex2exp)
if(!require(latex2exp)){
install.packages("latex2exp")
library(latex2exp)
}
install.packages("posterior")
if(!require(posterior)){
install.packages("posterior")
library(posterior)
}
if(!require(ggplot2)){
install.packages("ggplot2")
library(ggplot2)
}
if(!require(bayesplot)){
install.packages("bayesplot")
library(bayesplot)
}
if(!require(dplyr)){
install.packages("dplyr")
library(dplyr)
}
if(!require(tidyr)){
install.packages("tidyr")
library(tidyr)
}
# Some additional set-up to make plots legible
ggplot2::theme_set(theme_minimal(base_size = 14))
bayesplot::bayesplot_theme_set(theme_minimal(base_size = 14))
# register_knitr_engine()
if(!require(cmdstanr)){
install.packages("cmdstanr", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
library(cmdstanr)
}
cmdstan_installed <- function(){
res <- try(out <- cmdstanr::cmdstan_path(), silent = TRUE)
!inherits(res, "try-error")
}
if(!cmdstan_installed()){
install_cmdstan()
}
library(rstan)
a = stanc("linear_model.stan")
#| warning: false
# These are our observations y: the proportion of students handing in each assignment (1-8),
# sorted by year (row-wise) and assignment (column-wise).
# While the code suggest a matrix structure,
# the result will actually be a vector of length N = no_years * no_assignments
propstudents<-c(c(176, 174, 158, 135, 138, 129, 126, 123)/176,
c(242, 212, 184, 177, 174, 172, 163, 156)/242,
c(332, 310, 278, 258, 243, 242, 226, 224)/332,
c(301, 269, 231, 232, 217, 208, 193, 191)/301,
c(245, 240, 228, 217, 206, 199, 191, 182)/245)
# These are our predictors x: for each observation, the corresponding assignment number.
assignment <- rep(1:8, 5)
# These are in some sense our test data: the proportion of students handing in the last assignment (9),
# sorted by year.
# Usually, we would not want to split our data like that and instead
# use e.g. Leave-One-Out Cross-Validation (LOO-CV, see e.g. http://mc-stan.org/loo/index.html)
# to evaluate model performance.
propstudents9 = c(121/176, 153/242, 218/332, 190/301, 175/245)
# The total number of assignments
no_assignments = 9
# The assignment numbers for which we want to generate predictions
x_predictions = 1:no_assignments
# (Cmd)Stan(R) expects the data to be passed in the below format:
model_data = list(N=length(assignment),
x=assignment,
y=propstudents,
no_predictions=no_assignments,
x_predictions=x_predictions)
#| warning: false
# This reads the file at the specified path and tries to compile it.
# If it fails, an error is thrown.
retention_model = cmdstan_model("linear_model.stan")
# This "out <- capture.output(...)" construction suppresses output from cmdstanr
# See also https://github.com/stan-dev/cmdstanr/issues/646
out <- capture.output(
# Sampling from the posterior distribution happens here:
fit <- retention_model$sample(data=model_data, refresh=0, show_messages=FALSE)
)
#| warning: false
# This reads the file at the specified path and tries to compile it.
# If it fails, an error is thrown.
retention_model = cmdstan_model("linear_model.stan")
# This "out <- capture.output(...)" construction suppresses output from cmdstanr
# See also https://github.com/stan-dev/cmdstanr/issues/646
out <- capture.output(
# Sampling from the posterior distribution happens here:
fit <- retention_model$sample(data=model_data, refresh=0, show_messages=FALSE)
)
# This extracts the draws from the sampling result as a data.frame.
draws_df = fit$draws(format="draws_df")
# This does some data/draws wrangling to compute the 5, 50 and 95 percentiles of
# the mean at the specified covariate values (x_predictions).
# It can be instructive to play around with each of the data processing steps
# to find out what each step does, e.g. by removing parts from the back like "|>  gather(pct,y,-x)"
# and printing the resulting data.frame.
mu_quantiles_df = draws_df |>
subset_draws(variable = c("mu_pred")) |>
summarise_draws(~quantile2(.x, probs = c(0.05, .5, 0.95))) |>
mutate(x = 1:9) |>
pivot_longer(c(q5, q50, q95), names_to = c("pct"))
# Same as above, but for the predictions.
y_quantiles_df = draws_df |>
subset_draws(variable = c("y_pred")) |>
summarise_draws(~quantile2(.x, probs = c(0.05, .5, 0.95))) |>
mutate(x = 1:9) |>
pivot_longer(c(q5, q50, q95), names_to = c("pct"))
#| label: fig-posterior
#| fig-cap: Describe me in your submission!
ggplot() +
# scatter plot of the training data:
geom_point(
aes(x, y, color=assignment),
data=data.frame(x=assignment, y=propstudents, assignment="1-8")
) +
# scatter plot of the test data:
geom_point(
aes(x, y, color=assignment),
data=data.frame(x=no_assignments, y=propstudents9, assignment="9")
) +
# you have to tell us what this plots:
geom_line(aes(x,y=value,linetype=pct), data=mu_quantiles_df, color='grey', linewidth=1.5) +
# you have to tell us what this plots:
geom_line(aes(x,y=value,linetype=pct), data=y_quantiles_df, color='red') +
# adding xticks for each assignment:
scale_x_continuous(breaks=1:no_assignments) +
# adding labels to the plot:
labs(y="assignment submission %", x="assignment number") +
# specifying that line types repeat:
scale_linetype_manual(values=c(2,1,2)) +
# Specify colours of the observations:
scale_colour_manual(values = c("1-8"="black", "9"="blue")) +
# remove the legend for the linetypes:
guides(linetype="none")
fit$cmdstan_diagnose()
data("bioassay")
model = cmdstan_model("multi_normal_model.stan")
mu_a <- 0  # Mean of the first variable
mu_b <- 10  # Mean of the second variable
sigma_a <- 2  # Standard deviation of the first variable
sigma_b <- 10  # Standard deviation of the second variable
rho <- 0.6  # Correlation coefficient
cov_matrix <- matrix(c(sigma_a^2, rho * sigma_a * sigma_b, rho * sigma_a * sigma_b, sigma_b^2), nrow = 2, ncol = 2)
mean_vector <- c(mu_a, mu_b)
data_list <- list(
N = length(bioassay$x),
x = bioassay$x,
y =   bioassay$y,
n = bioassay$n,
mu = mean_vector,
Sigma = cov_matrix
)
fit <- stan(file = "multi_normal_model.stan", data = data_list, chains = 4, iter = 2000)
print(fit)
print(fit)
theta_samples <- as.data.frame(fit, pars = "theta")
colnames(theta_samples) <- c("Alpha","Beta")
print(paste("R_hat for Alpha", round(rhat_basic(theta_samples["Alpha"]), digits=4)))
print(paste("R_hat for Beta", round(rhat_basic(theta_samples["Beta"]), digits=4)))
# Create a scatter plot
ggplot(theta_samples, aes(x = theta_1, y = theta_2)) +
geom_point() +
labs(x = "Alpha", y = "Beta") +
ggtitle("Scatter Plot of Theta Values")
data("bioassay")
model = cmdstan_model("multi_normal_model.stan")
mu_a <- 0  # Mean of the first variable
mu_b <- 10  # Mean of the second variable
sigma_a <- 2  # Standard deviation of the first variable
sigma_b <- 10  # Standard deviation of the second variable
rho <- 0.6  # Correlation coefficient
cov_matrix <- matrix(c(sigma_a^2, rho * sigma_a * sigma_b, rho * sigma_a * sigma_b, sigma_b^2), nrow = 2, ncol = 2)
mean_vector <- c(mu_a, mu_b)
data_list <- list(
N = length(bioassay$x),
x = bioassay$x,
y =   bioassay$y,
n = bioassay$n,
mu = mean_vector,
Sigma = cov_matrix
)
fit <- stan(file = "multi_normal_model.stan", data = data_list, chains = 4, iter = 2000)
print(fit)
data("bioassay")
model = cmdstan_model("multi_normal_model.stan")
mu_a <- 0  # Mean of the first variable
mu_b <- 10  # Mean of the second variable
sigma_a <- 2  # Standard deviation of the first variable
sigma_b <- 10  # Standard deviation of the second variable
rho <- 0.6  # Correlation coefficient
cov_matrix <- matrix(c(sigma_a^2, rho * sigma_a * sigma_b, rho * sigma_a * sigma_b, sigma_b^2), nrow = 2, ncol = 2)
mean_vector <- c(mu_a, mu_b)
data_list <- list(
N = length(bioassay$x),
x = bioassay$x,
y =   bioassay$y,
n = bioassay$n,
mu = mean_vector,
Sigma = cov_matrix
)
fit <- stan(file = "multi_normal_model.stan", data = data_list, chains = 4, iter = 2000)
print(fit)
theta_samples <- as.data.frame(fit, pars = "theta")
colnames(theta_samples) <- c("Alpha","Beta")
print(paste("R_hat for Alpha", round(rhat_basic(theta_samples["Alpha"]), digits=4)))
print(paste("R_hat for Beta", round(rhat_basic(theta_samples["Beta"]), digits=4)))
# Create a scatter plot
ggplot(theta_samples, aes(x = theta_1, y = theta_2)) +
geom_point() +
labs(x = "Alpha", y = "Beta") +
ggtitle("Scatter Plot of Theta Values")
# Create a scatter plot
ggplot(theta_samples, aes(x = alpha, y = beta)) +
geom_point() +
labs(x = "Alpha", y = "Beta") +
ggtitle("Scatter Plot of Theta Values")
# Create a scatter plot
ggplot(theta_samples, aes(x = Alpha, y = Beta)) +
geom_point() +
labs(x = "Alpha", y = "Beta") +
ggtitle("Scatter Plot of Theta Values")
# Create a scatter plot
ggplot(theta_samples, aes(x = Alpha, y = Beta)) +
geom_point() +
labs(x = "Alpha", y = "Beta") +
ggtitle("Scatter Plot of Theta Values")
update.packages(ask = FALSE, checkBuilt = TRUE)
install.packages('gfortran')
#| label: fig-posterior
#| fig-cap: Describe me in your submission!
ggplot() +
# scatter plot of the training data:
geom_point(
aes(x, y, color=assignment),
data=data.frame(x=assignment, y=propstudents, assignment="1-8")
) +
# scatter plot of the test data:
geom_point(
aes(x, y, color=assignment),
data=data.frame(x=no_assignments, y=propstudents9, assignment="9")
) +
# you have to tell us what this plots:
geom_line(aes(x,y=value,linetype=pct), data=mu_quantiles_df, color='grey', linewidth=1.5) +
# you have to tell us what this plots:
geom_line(aes(x,y=value,linetype=pct), data=y_quantiles_df, color='red') +
# adding xticks for each assignment:
scale_x_continuous(breaks=1:no_assignments) +
# adding labels to the plot:
labs(y="assignment submission %", x="assignment number") +
# specifying that line types repeat:
scale_linetype_manual(values=c(2,1,2)) +
# Specify colours of the observations:
scale_colour_manual(values = c("1-8"="black", "9"="blue")) +
# remove the legend for the linetypes:
guides(linetype="none")
print(fit)
data("bioassay")
model = cmdstan_model("multi_normal_model.stan")
mu_a <- 0  # Mean of the first variable
mu_b <- 10  # Mean of the second variable
sigma_a <- 2  # Standard deviation of the first variable
sigma_b <- 10  # Standard deviation of the second variable
rho <- 0.6  # Correlation coefficient
cov_matrix <- matrix(c(sigma_a^2, rho * sigma_a * sigma_b, rho * sigma_a * sigma_b, sigma_b^2), nrow = 2, ncol = 2)
mean_vector <- c(mu_a, mu_b)
data_list <- list(
N = length(bioassay$x),
x = bioassay$x,
y =   bioassay$y,
n = bioassay$n,
mu = mean_vector,
Sigma = cov_matrix
)
fit <- stan(file = "multi_normal_model.stan", data = data_list, chains = 4, iter = 2000)
data("bioassay")
model = cmdstan_model("multi_normal_model.stan")
mu_a <- 0  # Mean of the first variable
mu_b <- 10  # Mean of the second variable
sigma_a <- 2  # Standard deviation of the first variable
sigma_b <- 10  # Standard deviation of the second variable
rho <- 0.6  # Correlation coefficient
cov_matrix <- matrix(c(sigma_a^2, rho * sigma_a * sigma_b, rho * sigma_a * sigma_b, sigma_b^2), nrow = 2, ncol = 2)
mean_vector <- c(mu_a, mu_b)
data_list <- list(
N = length(bioassay$x),
x = bioassay$x,
y =   bioassay$y,
n = bioassay$n,
mu = mean_vector,
Sigma = cov_matrix
)
fit <- stan(file = "multi_normal_model.stan", data = data_list, chains = 4, iter = 2000)
data("bioassay")
model = cmdstan_model("multi_normal_model.stan")
mu_a <- 0  # Mean of the first variable
mu_b <- 10  # Mean of the second variable
sigma_a <- 2  # Standard deviation of the first variable
sigma_b <- 10  # Standard deviation of the second variable
rho <- 0.6  # Correlation coefficient
cov_matrix <- matrix(c(sigma_a^2, rho * sigma_a * sigma_b, rho * sigma_a * sigma_b, sigma_b^2), nrow = 2, ncol = 2)
mean_vector <- c(mu_a, mu_b)
data_list <- list(
N = length(bioassay$x),
x = bioassay$x,
y =   bioassay$y,
n = bioassay$n,
mu = mean_vector,
Sigma = cov_matrix
)
fit <- stan(file = "multi_normal_model.stan", data = data_list, chains = 4, iter = 2000)
rstan:::rstudio_stanc("multi_normal_model.stan")
::: both
fit$cmdstan_diagnose()
fit$cmdstan_diagnose()
rm(list=ls())
# These are in some sense our test data: the proportion of students handing in the last assignment (9),
# sorted by year.
# Usually, we would not want to split our data like that and instead
# use e.g. Leave-One-Out Cross-Validation (LOO-CV, see e.g. http://mc-stan.org/loo/index.html)
# to evaluate model performance.
propstudents9 = c(121/176, 153/242, 218/332, 190/301, 175/245)
# The total number of assignments
no_assignments = 9
#| warning: false
# These are our observations y: the proportion of students handing in each assignment (1-8),
# sorted by year (row-wise) and assignment (column-wise).
# While the code suggest a matrix structure,
# the result will actually be a vector of length N = no_years * no_assignments
propstudents<-c(c(176, 174, 158, 135, 138, 129, 126, 123)/176,
c(242, 212, 184, 177, 174, 172, 163, 156)/242,
c(332, 310, 278, 258, 243, 242, 226, 224)/332,
c(301, 269, 231, 232, 217, 208, 193, 191)/301,
c(245, 240, 228, 217, 206, 199, 191, 182)/245)
# These are our predictors x: for each observation, the corresponding assignment number.
assignment <- rep(1:8, 5)
# These are in some sense our test data: the proportion of students handing in the last assignment (9),
# sorted by year.
# Usually, we would not want to split our data like that and instead
# use e.g. Leave-One-Out Cross-Validation (LOO-CV, see e.g. http://mc-stan.org/loo/index.html)
# to evaluate model performance.
propstudents9 = c(121/176, 153/242, 218/332, 190/301, 175/245)
# The total number of assignments
no_assignments = 9
# The assignment numbers for which we want to generate predictions
x_predictions = 1:no_assignments
# (Cmd)Stan(R) expects the data to be passed in the below format:
model_data = list(N=length(assignment),
x=assignment,
y=propstudents,
no_predictions=no_assignments,
x_predictions=x_predictions)
#| warning: false
# This reads the file at the specified path and tries to compile it.
# If it fails, an error is thrown.
retention_model = cmdstan_model("linear_model.stan")
# This "out <- capture.output(...)" construction suppresses output from cmdstanr
# See also https://github.com/stan-dev/cmdstanr/issues/646
out <- capture.output(
# Sampling from the posterior distribution happens here:
fit <- retention_model$sample(data=model_data, refresh=0, show_messages=FALSE)
)
#| warning: false
# This reads the file at the specified path and tries to compile it.
# If it fails, an error is thrown.
retention_model = cmdstan_model("linear_model.stan")
# This "out <- capture.output(...)" construction suppresses output from cmdstanr
# See also https://github.com/stan-dev/cmdstanr/issues/646
out <- capture.output(
# Sampling from the posterior distribution happens here:
fit <- retention_model$sample(data=model_data, refresh=0, show_messages=FALSE)
)
# This extracts the draws from the sampling result as a data.frame.
draws_df = fit$draws(format="draws_df")
# This does some data/draws wrangling to compute the 5, 50 and 95 percentiles of
# the mean at the specified covariate values (x_predictions).
# It can be instructive to play around with each of the data processing steps
# to find out what each step does, e.g. by removing parts from the back like "|>  gather(pct,y,-x)"
# and printing the resulting data.frame.
mu_quantiles_df = draws_df |>
subset_draws(variable = c("mu_pred")) |>
summarise_draws(~quantile2(.x, probs = c(0.05, .5, 0.95))) |>
mutate(x = 1:9) |>
pivot_longer(c(q5, q50, q95), names_to = c("pct"))
# Same as above, but for the predictions.
y_quantiles_df = draws_df |>
subset_draws(variable = c("y_pred")) |>
summarise_draws(~quantile2(.x, probs = c(0.05, .5, 0.95))) |>
mutate(x = 1:9) |>
pivot_longer(c(q5, q50, q95), names_to = c("pct"))
#| label: fig-posterior
#| fig-cap: Describe me in your submission!
ggplot() +
# scatter plot of the training data:
geom_point(
aes(x, y, color=assignment),
data=data.frame(x=assignment, y=propstudents, assignment="1-8")
) +
# scatter plot of the test data:
geom_point(
aes(x, y, color=assignment),
data=data.frame(x=no_assignments, y=propstudents9, assignment="9")
) +
# you have to tell us what this plots:
geom_line(aes(x,y=value,linetype=pct), data=mu_quantiles_df, color='grey', linewidth=1.5) +
# you have to tell us what this plots:
geom_line(aes(x,y=value,linetype=pct), data=y_quantiles_df, color='red') +
# adding xticks for each assignment:
scale_x_continuous(breaks=1:no_assignments) +
# adding labels to the plot:
labs(y="assignment submission %", x="assignment number") +
# specifying that line types repeat:
scale_linetype_manual(values=c(2,1,2)) +
# Specify colours of the observations:
scale_colour_manual(values = c("1-8"="black", "9"="blue")) +
# remove the legend for the linetypes:
guides(linetype="none")
fit$cmdstan_diagnose()
data("bioassay")
model = cmdstan_model("multi_normal_model.stan")
mu_a <- 0  # Mean of the first variable
mu_b <- 10  # Mean of the second variable
sigma_a <- 2  # Standard deviation of the first variable
sigma_b <- 10  # Standard deviation of the second variable
rho <- 0.6  # Correlation coefficient
cov_matrix <- matrix(c(sigma_a^2, rho * sigma_a * sigma_b, rho * sigma_a * sigma_b, sigma_b^2), nrow = 2, ncol = 2)
mean_vector <- c(mu_a, mu_b)
data_list <- list(
N = length(bioassay$x),
x = bioassay$x,
y =   bioassay$y,
n = bioassay$n,
mu = mean_vector,
Sigma = cov_matrix
)
fit <- stan(file = "multi_normal_model.stan", data = data_list, chains = 4, iter = 2000)
print(fit)
fit$cmdstan_diagnose()
$cmdstan_diagnose()
fit$diagnose()
stan_diagnostics(fit)
library(rstan)
stan_diagnostics(fit)
theta_samples <- as.data.frame(fit, pars = "theta")
colnames(theta_samples) <- c("Alpha","Beta")
print(paste("R_hat for Alpha", round(rhat_basic(theta_samples["Alpha"]), digits=4)))
print(paste("R_hat for Beta", round(rhat_basic(theta_samples["Beta"]), digits=4)))
