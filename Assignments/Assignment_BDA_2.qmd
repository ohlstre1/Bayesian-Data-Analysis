---
title: "Assignment 2"
author: anonymous # <-- hand in anonymously
format: 
  html:
    toc: true
    code-tools: true
    code-line-numbers: true  
    number-sections: true
    mainfont: Georgia, serif
  pdf:  
    geometry:
    - left=1cm,top=1cm,bottom=1cm,right=7cm
    number-sections: true
    code-annotations: none
    include-in-header: 
      text: |
        % You can add TeX macros here for PDF, 
        % see https://quarto.org/docs/output-formats/pdf-basics.html#latex-includes
        \newcommand{\BetaDist}{\mathrm{Beta}} 

---

::: hidden
$$
% You can add TeX macros here for HTML, see https://quarto.org/docs/authoring/markdown-basics.html#equations
\renewcommand{\BetaDist}{\mathrm{Beta}}
$$
:::

# General information

::: {.content-hidden when-format="pdf"}
::: {.callout-warning collapse="false"}
## Setup

*This block will only be visible in your HTML output, but will be hidden when rendering to PDF with quarto for the submission.* **Make sure that this does not get displayed in the PDF!**

This is the template for [assignment 2](assignment2.html). You can download the [qmd-file](./template2.qmd) or copy the code from this rendered document after clicking on `</> Code` in the top right corner.

**Please replace the instructions in this template by your own text, explaining what you are doing in each exercise.**

The following will set-up `markmyassignment` to check your functions at the end of the notebook:

```{r}
library(markmyassignment) 
assignment_path = paste("https://github.com/avehtari/BDA_course_Aalto/",
"blob/master/assignments/tests/assignment2.yml", sep="")
set_assignment(assignment_path)    
```

The following installs the `aaltobda` package:

```{r}
#| cache: true
# Caching should be fine here
#install.packages("remotes")
#remotes::install_github("avehtari/BDA_course_Aalto", subdir = #"rpackage", upgrade="never")
```
:::
:::

# Inference for binomial proportion

Removing old variables, loading the library and the data.

```{r}
rm(list = ls())
library(aaltobda)
data("algae")

```

One is given that $\pi = Beta(2,10)$ and that y follows a binomial model. We can formulate the likelihood $p(y|\pi)$ as

$$
  p(y|\pi) = {n\choose y}\pi^y(1-\pi)^{n-y} \\
$$ and the prior $p(\pi)$ as

$$
  p(\pi) = Beta(2,10).
$$

Using this information, we can define the posterior as $$
  p(\pi|y) = {n\choose y}\pi^y(1-\pi)^{n-y} \cdot p(\pi) \\
  = Beta(\pi | 2+y,10+n-y).
$$Start by creating a function to calculate the posterior alpha and betas, which will also be useful later.

```{r}

prior_alpha = 2
prior_beta = 10

#algae_test <- c(0, 1, 1, 0, 0, 0)

posterior_distribution = function(data, prior_alpha, prior_beta) {
  n = length(data)
  y = sum(data)
  post_alpha = prior_alpha+y
  post_beta = prior_beta+n-y
  res = list(alpha=post_alpha, beta = post_beta)
  return(res)
}
res = posterior_distribution(algae, prior_alpha , prior_beta) 
alpha = res$alpha
beta = res$beta
cat(paste0("alpha: ", alpha), "\n")
cat(paste0("beta: ", beta), "\n")


```

The results are:

$$
  p(\pi|y) = Beta(46,240)
$$

## (b)

```{r}

beta_point_est <- function(prior_alpha, prior_beta, data) {
    res = posterior_distribution(data, prior_alpha,prior_beta) 
    alpha = res$alpha
    beta = res$beta
    return(alpha/(alpha+beta))
}

#beta_point_est(prior_alpha = 2, prior_beta = 10, data = algae_test) #Test should be 0.2222222

beta_point_est(prior_alpha = 2, prior_beta = 10, data = algae)

```

The mean was used to compute the point estimate which has a value of 0.161

```{r}

beta_interval <- function(prior_alpha, prior_beta, data, prob=0.9) {
    lower = (1-prob)/2
    upper = prob+lower
    interval = c(lower,upper)
    res = posterior_distribution(data, prior_alpha, prior_beta) 
    alpha = res$alpha
    beta = res$beta
    res = qbeta(interval, alpha, beta)
    return(res)
    c(0.0846451, 0.3956414)
}
#beta_interval( prior_alpha = 2, prior_beta = 10, data = algae_test) # Test works as result equals to c(0.0846451, 0.3956414)
beta_interval( prior_alpha = 2, prior_beta = 10, data = algae) 
```

For the 90% posterior interval is computed a lower bound of $0.127$ and a upper bound of $0.198$.

## (c)

Keep the below name and format for the function to work with `markmyassignment`:

```{r}
# Useful function: pbeta()

beta_low <- function(prior_alpha, prior_beta, data, pi_0=0.2) {
  res = posterior_distribution(data, prior_alpha, prior_beta) 
  alpha = res$alpha
  beta = res$beta
  res = pbeta(pi_0, alpha, beta)
  return(res)
}
#beta_low(prior_alpha = 2, prior_beta = 10, data = algae_test, pi_0 = 0.2) # Test works 0.4511238

beta_low(prior_alpha = 2, prior_beta = 10, data = algae, pi_0 = 0.2)

```

There's approximately a $95,9\%$ chance of being less than $0.2$. \## (d)

We've made several key assumptions in our analysis. Firstly, we've assumed that the value of Ï€ (pi) is continuous. Secondly, we've assumed that all monitoring sites are independent of each other and lastly, the sites exhibit identical behavior. In other words, we've assumed that our data follows the principles of independence and identically distributed (i.i.d.). Furthermore, we've assumed that the algae status in the water is binary, meaning it's either present (1) or absent (0). These are the requirements for us to be able to use binomial- and, by extension, beta-distributions on the data.

## (e)

We will utilize a prior probability of $\pi_0=0.2$, as indicated in part c) and derived from historical records, to compute various prior distributions

```{r}
E = 0.2
prior_alpha = c(1,5,10,25,100)
prior_beta = c(1,-(prior_alpha[-1]/E)*(E-1))
res = posterior_distribution(algae, prior_alpha, prior_beta) 
alpha = res$alpha
beta = res$beta
x= seq(from=0,to=1, by=1/270)

par(mfrow=c(1,1))
plot(x, dbeta(x,alpha[1],beta[1]),
     type='l', col='black',
     ylim=c(0,35),
     xlim=c(0,0.4),
     ylab="PDF")
legend_text = list()

for (i in 2:5) {
  lines(x, dbeta(x,alpha[i],beta[i]), type='l', col = rainbow(5)[i])
  legend_text[[i-1]] = paste0("Beta: alpha: ",prior_alpha[i], ", beta: ", prior_beta[i])
}

legend(0.235,30, legend=c(paste0("Uniform: alpha: ",prior_alpha[1], ", beta: ", prior_beta[1]), legend_text),
       col=c("black", rainbow(5)), lty=1, cex=0.8)

```

Results are presented in the table bellow. One can see that increasing the prior knowledge makes the beta posterior distribution narrower and shifts towards the prior mean. Furthermore, one can see that the posterior means are mostly within the interval that was computed in the b part. Observing the prior knowledge $\alpha + \beta$, is equal to 500 one can see our earlier calculated posterior mean falls outside the 90% interval.

```{r, echo=FALSE, o}
library(knitr)


post_mean = alpha/(alpha+beta)
alpha_beta_vec = c("alpha + beta (Prior)", prior_alpha + prior_beta)
prior_mean_vec = c("mean (Prior)", round(prior_alpha /(prior_alpha + prior_beta), digits=3))
post_mean_vec = c("mean (Post)", round(alpha/(alpha+beta), digits=3))
interval_lower_vec = numeric(5)
interval_upper_vec = numeric(5)


for(i in 1:5){
  int = beta_interval(prior_alpha = prior_alpha[i], prior_beta = prior_beta[i], data = algae, prob = 0.9)
  interval_lower_vec[i] = round(int[1],digits=3)
  interval_upper_vec[i] = round(int[2],digits=3)
}
info_frame = data.frame(alpha_beta_vec[-1],prior_mean_vec[-1],post_mean_vec[-1],interval_lower_vec,interval_upper_vec)
names(info_frame) = c(alpha_beta_vec[1],prior_mean_vec[1],post_mean_vec[1], "90% interval lower bound/", "upper bound")
kable(info_frame, align = "c")

```

Chat-GPT 3.5 was used to better formulate the analysis and to brainstorm on different ways to tackle the problems. All answers have been veryfied by the author.

::: {.content-hidden when-format="pdf"}
::: {.callout-warning collapse="false"}
## markmyassignment

*This block will only be visible in your HTML output, but will be hidden when rendering to PDF with quarto for the submission.* **Make sure that this does not get displayed in the PDF!**

The following will check the functions for which `markmyassignment` has been set up:

```{r}
mark_my_assignment()    
```
:::
:::
