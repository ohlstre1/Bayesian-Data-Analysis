a_4<- filter(new_data, Diet == 4)
a_1$Diet<- NULL
a_2$Diet<- NULL
a_3$Diet<- NULL
a_4$Diet<- NULL
apply(a_1, 2, chickenwise_probability_of_escape)
apply(a_2, 2, chickenwise_probability_of_escape)
apply(a_3, 2, chickenwise_probability_of_escape)
apply(a_4, 2, chickenwise_probability_of_escape)
View(a_1)
# Plot the distribution of chickenwise probabilities per diet with uncertainty intervals
ggplot(dietwise_probs, aes(x = Chickenwise_Prob  , y = as.factor(Diet), group = Diet, color = as.factor(Diet))) +
stat_dotsinterval(dotsize = 0.8) +
labs(title = "Distribution of Chickenwise Probabilities of Escape per Diet",
x = "Diet",
y = "Chickenwise Probability of Escape") +
scale_color_discrete(name = "Diet")
View(dietwise_probs)
# Plot the distribution of chickenwise probabilities per diet with uncertainty intervals
ggplot(dietwise_probs, aes(x = Chickenwise_Prob  , y = (Diet), group = Diet, color = as.factor(Diet))) +
stat_dotsinterval(dotsize = 0.8) +
labs(title = "Distribution of Chickenwise Probabilities of Escape per Diet",
x = "Diet",
y = "Chickenwise Probability of Escape") +
scale_color_discrete(name = "Diet")
library(bayesplot)
if(!require(medicaldata)){
install.packages("medicaldata")
}
library(medicaldata)
library(aaltobda)
library(bayesplot)
library(cmdstanr)
library(dplyr)
library(ggplot2)
library(ggdist)
library(posterior)
data(indo_rct)
rm(list=ls())
data(indo_rct)
View(indo_rct)
View(indo_rct)
indo_rct
if(!require(medicaldata)){
install.packages("medicaldata")
}
library(medicaldata)
library(aaltobda)
library(bayesplot)
library(cmdstanr)
library(dplyr)
library(ggplot2)
library(ggdist)
library(posterior)
library(dplyr)
library(reshape2)
data(indo_rct)
# Load necessary libraries
df_numeric <- df %>%
mutate(across(where(is.factor), ~ as.numeric(.x == "1_yes")))
if(!require(medicaldata)){
install.packages("medicaldata")
}
library(medicaldata)
library(aaltobda)
library(bayesplot)
library(cmdstanr)
library(dplyr)
library(ggplot2)
library(ggdist)
library(posterior)
library(dplyr)
library(reshape2)
data(indo_rct)
# Load necessary libraries
df_numeric <- df %>%
mutate(across(where(is.factor), ~ as.numeric(.x == "1_yes")))
data(Polyps)
data(polyps)
View(polyps)
data("strep_tb")
View(strep_tb)
rm(list=ls())
data("strep_tb")
View(strep_tb)
summary(strep_tb)
cor(strep_tb)
strep_tb
ggplot(strep_tb, aes(x = baseline_temp)) + geom_histogram()
write.csv(strep_tb, file = "strep_tb.csv")
assignment_path = paste("https://github.com/avehtari/BDA_course_Aalto/",
"blob/master/assignments/tests/assignment4.yml", sep="")
if(!require(markmyassignment)){
install.packages("markmyassignment")
library(markmyassignment)
}
assignment_path = paste("https://github.com/avehtari/BDA_course_Aalto/",
"blob/master/assignments/tests/assignment4.yml", sep="")
set_assignment(assignment_path)
if(!require(aaltobda)){
install.packages("remotes")
remotes::install_github("avehtari/BDA_course_Aalto", subdir = "rpackage", upgrade="never")
library(aaltobda)
}
if(!require(latex2exp)){
install.packages("latex2exp")
library(latex2exp)
}
mu_a <- 0  # Mean of the first variable
mu_b <- 10  # Mean of the second variable
sigma_a <- 2  # Standard deviation of the first variable
sigma_b <- 10  # Standard deviation of the second variable
rho <- 0.6  # Correlation coefficient
cov_matrix <- matrix(c(sigma_a^2, rho * sigma_a * sigma_b, rho * sigma_a * sigma_b, sigma_b^2), nrow = 2, ncol = 2)
mean_vector <- c(mu_a, mu_b)
print("Mean Vector:")
print(mean_vector)
print("Covariance Matrix:")
print(cov_matrix)
data("bioassay")
View(bioassay)
?data("bioassay")
# Plotting the line plot with ggplot
ggplot(data = ChickWeight, aes(x = Time, y = weight, group = Diet, color = Diet)) +
geom_line(aes(color = as.factor(Diet)), method = 'loess', se = FALSE) +
labs(title = "Chicken Weight Over Time by Diet",
x = "Time(Days)",
y = "Weight (g)") +
theme_minimal() +
scale_color_brewer(palette = "Set1")
# Plotting the line plot with ggplot
ggplot(data = ChickWeight, aes(x = Time, y = weight, group = Diet, color = Diet)) +
geom_line(aes(group = Diet ,color = (Diet)), method = 'loess', se = FALSE) +
labs(title = "Chicken Weight Over Time by Diet",
x = "Time(Days)",
y = "Weight (g)") +
theme_minimal() +
scale_color_brewer(palette = "Set1")
# Plotting the line plot with ggplot
ggplot(data = ChickWeight, aes(x = Time, y = weight, group = Diet, color = Diet)) +
geom_line(aes( group= Chick), method = 'loess', se = FALSE) +
labs(title = "Chicken Weight Over Time by Diet",
x = "Time(Days)",
y = "Weight (g)") +
theme_minimal() +
scale_color_brewer(palette = "Set1")
?brms
data("strep_tb")
View(strep_tb)
strep_tb <- na.omit(strep_tb)
View(strep_tb)
View(strep_tb)
data <- read.csv(file = "strep_tb_scaled.csv", header = TRUE)
View(data)
data$X <- NULL
View(data)
View(data)
data$X <- NULL
View(data)
data <- read.csv(file = "strep_tb_scaled.csv", header = TRUE)
View(data)
data$X <- NULL
data_list <- list(
N = length(data$baseline_temp),
x = bioassay$baseline,
y = bioassay$improved,
n = bioassay$n,
mu = mean_vector,
Sigma = cov_matrix
)
data_list <- list(
N = length(data$baseline_temp),
x = bioassay$baseline,
y = bioassay$improved,
)
fit <- stan(file = "multi_normal_model.stan", data = data_list, chains = 4, iter = 2000)
data_list <- list(
N = length(data$baseline_temp),
x = bioassay$baseline,
y = bioassay$improved,
mu = mean_vector,
Sigma = cov_matrix
)
library(rstan)
fit <- stan(file = "multi_normal_model.stan", data = data_list, chains = 4, iter = 2000)
fit <- stan(file = "logistic_stan.stan", data = data_list, chains = 4, iter = 2000)
rstan:::rstudio_stanc("Documents/Aalto/Bayesian Data Analysis /Assignments/logistic_model.stan")
rstan:::rstudio_stanc("Documents/Aalto/Bayesian Data Analysis /Assignments/logistic_model.stan")
fit <- stan(file = "logistic_stan.stan", data = data_list, chains = 4, iter = 2000)
setwd("~/Documents/Coding project/BDA-project-2023")
setwd("~/Documents/Coding project/BDA-project-2023")
setwd("~/Documents/Coding project/BDA-project-2023/")
setwd("~/Documents/Coding project/)
BDA
setwd("~/Documents/Coding project/BDA)
if(!require(medicaldata)){
install.packages("medicaldata")
install.packages("medicaldata")
if(!require(medicaldata)){
install.packages("medicaldata")
}
library(medicaldata)
library(aaltobda)
library(bayesplot)
library(cmdstanr)
library(dplyr)
library(ggplot2)
library(ggdist)
library(posterior)
library(dplyr)
library(reshape2)
library(rstan)
#x=  dosage, temp, radiol
data_list <- list(
N = length(data$baseline_temp),
x = bioassay$baseline,
y = bioassay$improved,
)
data <- read.csv(file = "strep_tb_scaled.csv", header = TRUE)
data$X <- NULL
#x=  dosage, temp, radiol
data_list <- list(
N = length(data$baseline_temp),
x = bioassay$baseline,
y = bioassay$improved,
)
data_list <- list(
N = length(data$baseline_temp),
x = data$baseline_temp,
y = data$improved,
)
data$baseline_temp
length(data$baseline_temp)
data$baseline_temp
View(bioassay)
data$n = 1
View(data)
data_list <- list(
N = length(data$baseline_temp),
x = data$baseline_temp,
y = data$improved,
n = data$n
)
fit <- stan(file = "logistic_stan.stan", data = data_list, chains = 4, iter = 2000)
fit <- stan(file = "logistic_stan.stan", data = data_list, chains = 4, iter = 2000)
pwd
pwd()
getwd()
setwd("Documents/Coding project/BDA")
getwd()
fit <- stan(file = "logistic_stan.stan", data = data_list, chains = 4, iter = 2000)
files()
list.files()
fit <- stan(file = "logistic_model.stan", data = data_list, chains = 4, iter = 2000)
rstan:::rstudio_stanc("logistic_model.stan")
rstan:::rstudio_stanc("logistic_model.stan")
fit <- stan(file = "logistic_model.stan", data = data_list, chains = 4, iter = 2000)
rstan:::rstudio_stanc("logistic_model.stan")
rstan:::rstudio_stanc("logistic_model.stan")
rstan:::rstudio_stanc("logistic_model.stan")
rstan:::rstudio_stanc("~/Documents/Aalto/Bayesian Data Analysis /Assignments/linear_model.stan")
rstan:::rstudio_stanc("logistic_model.stan")
rstan:::rstudio_stanc("logistic_model.stan")
#x=  dosage, temp, radiol
data_list <- list(
N = length(data$baseline_temp),
x = data$baseline_temp,
y = data$improved,
n = data$n
)
fit <- stan(file = "logistic_model.stan", data = data_list, chains = 4, iter = 2000)
rstan:::rstudio_stanc("logistic_model.stan")
rstan:::rstudio_stanc("logistic_model.stan")
rstan:::rstudio_stanc("logistic_model.stan")
rstan:::rstudio_stanc("logistic_model.stan")
rstan:::rstudio_stanc("logistic_model.stan")
rstan:::rstudio_stanc("logistic_model.stan")
rstan:::rstudio_stanc("logistic_model.stan")
rstan:::rstudio_stanc("logistic_model.stan")
rstan:::rstudio_stanc("logistic_model.stan")
rstan:::rstudio_stanc("logistic_model.stan")
#x=  dosage, temp, radiol
data_list <- list(
N = length(data$baseline_temp),
temp = data$baseline_temp,
esr = data$baseline_esr,
improved = data$improved,
)
#x=  dosage, temp, radiol
data$
data_list <- list(
N = length(data$baseline_temp),
temp = data$baseline_temp,
esr = data$baseline_esr,
improved = data$improved
)
#x=  dosage, temp, radiol
data_list <- list(
N = length(data$baseline_temp),
temp = data$baseline_temp,
esr = data$baseline_esr,
improved = data$improved
)
fit <- stan(file = "logistic_model.stan", data = data_list, chains = 4, iter = 2000)
summary(fit)
rstan:::rstudio_stanc("logistic_model.stan")
rstan:::rstudio_stanc("logistic_model.stan")
rstan:::rstudio_stanc("logistic_model.stan")
rstan:::rstudio_stanc("logistic_model.stan")
fit <- stan(file = "logistic_model.stan", data = data_list, chains = 4, iter = 2000)
fit$cmdstan_diagnose()
fit$cmdstan_diagnose()
fit$diagnose()
cmdstan_diagnose(fit)
fit_pooled$cmdstan_diagnose()
summary(fit)
data <- read.csv(file = "strep_tb_scaled.csv", header = TRUE)
data$X <- NULL
data$n = 1
data_list <- list(
N = length(data$baseline_temp),
temp = data$baseline_temp,
esr = data$baseline_esr,
improved = data$improved
)
fit <- stan(file = "logistic_model.stan", data = data_list, chains = 4, iter = 2000)
summary(fit)
cmdstan_diagnose(fit)
diagnose(fit)
model_pooled<- cmdstan_model(stan_file = "logistic_model.stan")
library(cmdstanr)
model_pooled<- cmdstan_model(stan_file = "logistic_model.stan")
# Sampling from the posterior distribution happens here:
fit_pooled <- model_pooled$sample(data = data_list, refresh=0,
show_messages=FALSE,
show_exceptions=FALSE)
if(!require(medicaldata)){
install.packages("medicaldata")
}
library(medicaldata)
library(aaltobda)
library(bayesplot)
library(cmdstanr)
library(dplyr)
library(ggplot2)
library(ggdist)
library(posterior)
library(dplyr)
library(reshape2)
library(rstan)
library(cmdstanr)
library(aaltobda)
library(bayesplot)
library(cmdstanr)
library(dplyr)
library(ggdist) # for stat_dotsinterval
library(posterior)
model_pooled<- cmdstan_model(stan_file = "logistic_model.stan")
rstan:::rstudio_stanc("logistic_model.stan")
# Sampling from the posterior distribution happens here:
fit_pooled <- model_pooled$sample(data = data_list, refresh=0,
show_messages=FALSE,
show_exceptions=FALSE)
model_pooled<- cmdstan_model(stan_file = "logistic_model.stan")
fit$diagnose()
rstan:::rstudio_stanc("logistic_model.stan")
model_pooled<- cmdstan_model(stan_file = "logistic_model.stan")
stanc --auto-format "logistic_model.stan"
model_pooled<- cmdstan_model(stan_file = "logistic_model.stan")
stanc --auto-format "logistic_model.stan"
model_pooled<- cmdstan_model(stan_file = "logistic_model.stan")
rstan:::rstudio_stanc("logistic_model.stan")
model_pooled<- cmdstan_model(stan_file = "logistic_model.stan")
# Sampling from the posterior distribution happens here:
fit_pooled <- model_pooled$sample(data = data_list, refresh=0,
show_messages=FALSE,
show_exceptions=FALSE)
# Sampling from the posterior distribution happens here:
fit_pooled <- model_pooled$sample(data = data_list, refresh=0,
show_messages=FALSE,
show_exceptions=FALSE)
print(fit_pooled)
rstan:::rstudio_stanc("logistic_model.stan")
fit_pooled$cmdstan_diagnose()
generated_values <- extract(fit)
View(generated_values)
generated_values$y_pred_prob
y_pred_prob = generated_values$y_pred_prob[]
View(y_pred_prob)
View(generated_values)
generated_values[["y_pred_prob"]]
y_pred_prob = generated_values$y_pred_prob[4000,]
rstan:::rstudio_stanc("logistic_model.stan")
rstan:::rstudio_stanc("logistic_model.stan")
model_pooled<- cmdstan_model(stan_file = "logistic_model.stan")
rstan:::rstudio_stanc("logistic_model.stan")
model_pooled<- cmdstan_model(stan_file = "logistic_model.stan")
# Sampling from the posterior distribution happens here:
fit<- model_pooled$sample(data = data_list, refresh=0,
show_messages=FALSE,
show_exceptions=FALSE)
# Sampling from the posterior distribution happens here:
fit<- model_pooled$sample(data = data_list, refresh=0,
show_messages=FALSE,
show_exceptions=FALSE)
print(fit_pooled)
generated_values <- extract(fit)
print(fit)
generated_values <- extract(fit)
generated_values <- extract(fit)
View(data)
data("strep_tb")
data("strep_tb")
library(medicaldata)
data("strep_tb")
force(strep_tb)
rm(list=ls())
data("strep_tb")
View(strep_tb)
sterp_tb
strep_tb[0:5]
View(strep_tb)
data <- read.csv(file = "strep_tb_scaled.csv", header = TRUE)
View(data)
data$X <- NULL
data[0:5]
data
rstan:::rstudio_stanc("logistic_model.stan")
rstan:::rstudio_stanc("logistic_model.stan")
rstan:::rstudio_stanc("logistic_model.stan")
rstan:::rstudio_stanc("logistic_model.stan")
data_list <- list(
N = length(data$baseline_temp),
X <- as.matrix(df[, c(data$baseline_temp, data$baseline_esr,)]),
y = data$improved
)
data_list <- list(
N = length(data$baseline_temp),
X <- as.matrix(data$baseline_temp, data$baseline_esr),
y = data$improved
)
#fit <- stan(file = "logistic_model.stan", data = data_list, chains = 4, iter = 2000)
model_pooled<- cmdstan_model(stan_file = "logistic_model.stan")
rstan:::rstudio_stanc("logistic_model.stan")
rstan:::rstudio_stanc("logistic_model.stan")
model_pooled<- cmdstan_model(stan_file = "logistic_model.stan")
model_pooled<- cmdstan_model(stan_file = "logistic_model.stan")
# Sampling from the posterior distribution happens here:
fit<- model_pooled$sample(data = data_list, refresh=0,
show_messages=FALSE,
show_exceptions=FALSE)
matrix <- as.matrix(data$baseline_temp, data$baseline_esr)
View(matrix)
View(matrix)
data$baseline_esr
data$baseline_temp
matrix <- as.matrix(c(data$baseline_temp, data$baseline_esr))
matrix <- data
View(matrix)
matrix <- cbind(data$baseline_temp, data$baseline_esr)
data_list <- list(
N = length(data$baseline_temp),
X <- as.matrix(data$baseline_temp, data$baseline_esr),
y = data$improved
)
#fit <- stan(file = "logistic_model.stan", data = data_list, chains = 4, iter = 2000)
# Sampling from the posterior distribution happens here:
fit<- model_pooled$sample(data = data_list, refresh=0,
show_messages=FALSE,
show_exceptions=FALSE)
matrix <- cbind(data$baseline_temp, data$baseline_esr)
data_list <- list(
N = length(data$baseline_temp),
X <- matrix,
y = data$improved
)
#fit <- stan(file = "logistic_model.stan", data = data_list, chains = 4, iter = 2000)
matrix <- cbind(data$baseline_temp, data$baseline_esr)
data_list <- list(
N = length(data$baseline_temp),
X <- matrix,
y = data$improved
)
#fit <- stan(file = "logistic_model.stan", data = data_list, chains = 4, iter = 2000)
model_pooled<- cmdstan_model(stan_file = "logistic_model.stan")
# Sampling from the posterior distribution happens here:
fit<- model_pooled$sample(data = data_list, refresh=0,
show_messages=FALSE,
show_exceptions=FALSE)
View(matrix)
shape(matrix)
matrix
# Sampling from the posterior distribution happens here:
fit<- model_pooled$sample(data = data_list, refresh=0,
show_messages=FALSE,
show_exceptions=FALSE)
str(data_list)
data_list <- list(
N = length(data$baseline_temp),
X = matrix,
y = data$improved
)
# Sampling from the posterior distribution happens here:
fit<- model_pooled$sample(data = data_list, refresh=0,
show_messages=FALSE,
show_exceptions=FALSE)
# Sampling from the posterior distribution happens here:
fit<- model_pooled$sample(data = data_list, refresh=0,
show_messages=FALSE,
show_exceptions=FALSE)
print(fit)
fit$cmdstan_diagnose()
